using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'diagonalDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int diagonalDifference(List<List<int>> arr)
    {
        var leftDiagonalSum = 0;
        var rightDiagonalSum = 0;
        var m = 0;
        
        for (int n = 0; n < arr.Count; n++){
            leftDiagonalSum += arr[n][m];
            rightDiagonalSum += arr[n][arr[n].Count - 1 - m];
            m++;
            
        }
        return Math.Abs(leftDiagonalSum - rightDiagonalSum);
    }
    /*
        n is the iterable used in for loop. So, it will start from 0 till the range of the length of the row of the array which is n => (0,1,2,3...,n-1) (note that range is not inclusive so it the range is till n-1)
        For the first diagonal, we have a[n][m]. So, it will get values like a[0][0], a[1][1], a[2][2],...a[n-1][n-1]..
        For the second diagonal, we need values like a[0][n-1], a[1][n-2], a[2][n-3],... Do you notice the pattern here? it is a[n][n-1-m]

        open to more contributions on solving em
    */
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<List<int>> arr = new List<List<int>>();

        for (int i = 0; i < n; i++)
        {
            arr.Add(Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList());
        }

        int result = Result.diagonalDifference(arr);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
